{{
    "Title": "The Fast and the Furious",
    "Year": "2001",
    "Rated": "PG-13",
    "Released": "22 Jun 2001",
    "Runtime": "106 min",
    "Genre": "Action, Crime, Thriller",
    "Director": "Rob Cohen",
    "Writer": "Ken Li, Gary Scott Thompson",
    "Actors": "Vin Diesel, Paul Walker, Michelle Rodriguez",
    "Plot": "Los Angeles police officer Brian O'Conner must decide where his loyalty really lies when he becomes enamored with the street racing world he has been sent undercover to destroy.",
    "Language": "English, Spanish",
    "Country": "United States, Germany",
    "Awards": "11 wins & 19 nominations",
    "Poster": "https://m.media-amazon.com/images/M/MV5BMTc4MzgxMjk4OF5BMl5BanBnXkFtZTgwNjQ3MzEwMjE@._V1_SX300.jpg",
    "Ratings": [
      {"Source": "Internet Movie Database", "Value": "6.8/10"},
      {"Source": "Rotten Tomatoes", "Value": "54%"},
      {"Source": "Metacritic", "Value": "58/100"}
    ],
    "imdbID": "tt0232500",
    "Type": "movie",
    "DVD": "03 Jun 2003",
    "BoxOffice": "$144,533,925",
    "Production": "Universal Pictures",
    "Website": "N/A",
    "Response": "True"
  }

  {
    "Title": "Winter Is Coming",
    "Year": "2011",
    "Rated": "TV-MA",
    "Released": "17 Apr 2011",
    "Season": "1",
    "Episode": "1",
    "Runtime": "62 min",
    "Genre": "Action, Adventure, Drama",
    "Director": "Tim Van Patten",
    "Writer": "David Benioff, D.B. Weiss, George R.R. Martin",
    "Actors": "Sean Bean, Mark Addy, Nikolaj Coster-Waldau",
    "Plot": "Eddard Stark is torn between his family and an old friend when asked to serve at the side of King Robert Baratheon; Viserys Targaryen plots to win back the throne; Ned seeks the truth behind Jon Arryn's death.",
    "imdbRating": "9.0",
    "imdbID": "tt1480055",
    "SeriesID": "tt0944947",
    "Type": "episode",
    "Response": "True"
  }
  
  }

  /*
  
  por algum motivo agora o meu JS com HTML não está funcionando como antes:

CODIGO DE ANTES QUE ESTAVA FUNCIONANDO:

HTML:
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Qual é o filme?</title>
</head>
<body>
    <header>
        <h1>What is the movie?</h1>
        <div class="search-container">
            <input type="text" class="escolha" placeholder="Digite o nome de um filme ou série..." autocomplete="off">
            <div class="suggestions" id="suggestionsBox"></div>
        </div>
        <button class="sobre">Sobre</button>
    </header>
    <main>
        <div class="corpo">
            
            <div class="pricipal">
                <div id="title">
                    <h2 class="h2title">Movie you chose</h2>
                    <div class="atributos">
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Released</h3>
                            <div class="atributo" id="Released">
                                <p class="pReleased"></p>
                                <span class="spanReleased"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Runtime</h3>
                            <div class="atributo" id="Runtime">
                                <p class="pRuntime"></p>
                                <span class="spanRuntime"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Director</h3>
                            <div class="allDirector">
                                <div class="atributo" id="Director">
                                    <p class="pDirector"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Writer</h3>
                            <div class="allWriter">
                                <div class="atributo" id="Writer">
                                    <p class="pWriter"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Actors</h3>
                            <div class="allActors">
                                <div class="atributo" id="Actors">
                                    <p class="pActors"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Genre</h3>
                            <div class="allGenre">
                                <div class="atributo" id="Genre">
                                    <p class="pGenre"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Country</h3>
                            <div class="allCountry">
                                <div class="atributo" id="Country">
                                    <p class="pCountry"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Ratings</h3>
                            <div class="atributo" id="Ratings">
                                <p class="pRatings"></p>
                                <span class="spanRatings"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">BoxOffice</h3>
                            <div class="atributo" id="BoxOffice">
                                <p class="pBoxOffice"></p>
                                <span class="spanBoxOffice"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Production</h3>
                            <div>
                                <div class="atributo" id="Production">
                                    <p class="pProduction"></p>
                                </div>
                            </div>
                            
                        </div>

                    </div>
                </div>
            </div>
            <div class="area">
                <span>O nome do filme precisa ser em inglês</span>
                <span>Os unícos filmes que o jogo funciona são do site IMDB</span>
                <button>Play</button>
                <button>To give up</button>
                <div class="tip">
                    <button>Tip</button>
                    <img src="" alt="">                
                </div>
                <div>
                    <h3>Description of the machine film:</h3>
                    <span></span>
                </div>

            </div>

            <div class="linha"></div>
        </div>        
    </main>
    <footer>
        <span>Mohammad | 2024</span>
    </footer>
    <div class="aviso">
        <h3>How to play?</h3>
        <p>It's a project that started with advanced topics, the idea of ​​the game is that the machine will choose a film and you have to guess.</p>
        <p>Each attribute here will show what you got wrong, if the attribute turned green it means you got it right, if it turned red you got it wrong and in these cases if it's something like a number it will indicate if you got more or less wrong, and if it turned gray It's because one of the values ​​doesn't exist on the IMDb website</p>
    </div>
    <script src="./script/funcoesComOfront.js"></script>
</body>
</html>


JS:

ARQUIVO funcoes:
// const { title, year, released, runtime, director, writer, actors, genre, country, ratings, plot, boxOffice, production, poster } = descMovie;

const APIIMDB = require('./funcoesParaAPI')


function ComparacaoDeFilme(objeto1, objeto2) {
    let obj1 = objeto1
    let obj2 = objeto2
    const resultado = {}

    // Comparação dos campos especificados
    resultado.title = obj1.title && obj2.title
        ? { status: (obj1.title === obj2.title), text: obj2.title }
        : { status: null, text: 'Um ou ambos os títulos estão vazios' }

    resultado.released = compararNumerosOuDatas(obj1.released, obj2.released, 'released')
    resultado.runtime = compararNumerosOuDatas(obj1.runtime, obj2.runtime, 'runtime')

    resultado.director = compararListasParaObjeto(obj1.director.split(', '), obj2.director.split(', '), 'director')
    resultado.writer = compararListasParaObjeto(obj1.writer.split(', '), obj2.writer.split(', '), 'writer')
    resultado.actors = compararListasParaObjeto(obj1.actors.split(', '), obj2.actors.split(', '), 'actors')
    resultado.genre = compararListasParaObjeto(obj1.genre.split(', '), obj2.genre.split(', '), 'genre')
    resultado.country = compararListasParaObjeto(obj1.country.split(', '), obj2.country.split(', '), 'country')

    // Comparação de ratings (somente do IMDb)
    const imdbRating1 = getImdbRating(obj1.ratings)
    const imdbRating2 = getImdbRating(obj2.ratings)
    resultado.ratings = compararNumerosOuDatas(imdbRating1, imdbRating2, 'ratings')

    // Comparação de boxOffice
    resultado.boxOffice = compararNumerosOuDatas(obj1.boxOffice, obj2.boxOffice, 'boxOffice')

    // Comparação de production
    resultado.production = compararListasParaObjeto(obj1.production.split(', '), obj2.production.split(', '), 'production')

    return resultado
}
function compararNumerosOuDatas(valor1, valor2, Campo) {
    let val1 = valor1
    let val2 = valor2
    let nomeCampo = Campo
    if (!val1 || val1 === 'N/A') val1 = null
    if (!val2 || val2 === 'N/A') val2 = null

    if (!val1 && !val2) {
        return { status: null, text: `Os dois campos de ${nomeCampo} estão vazios`, symbol: '---' }
    }
    if (!val1) {
        return { status: null, text: `O ${nomeCampo} do primeiro objeto está vazio`, symbol: '---' }
    }
    if (!val2) {
        return { status: null, text: `O ${nomeCampo} do segundo objeto está vazio`, symbol: '---' }
    }
    if (val1 === val2) {
        return { status: true, text: val2, symbol: '=' }
    } else {
        return { status: false, text: val2, symbol: val1 > val2 ? '<' : '>' }
    }
}

function compararListasParaObjeto(lista1, lista2, nomeCampo) {
    if ((!lista1 || lista1.includes('N/A')) && (!lista2 || lista2.includes('N/A'))) {
        return [{ status: null, text: `Os dois campos de ${nomeCampo} estão vazios` }]
    }
    if (!lista1 || lista1.includes('N/A')) {
        return [{ status: null, text: `O ${nomeCampo} do primeiro objeto está vazio` }]
    }
    if (!lista2 || lista2.includes('N/A')) {
        return [{ status: null, text: `O ${nomeCampo} do segundo objeto está vazio` }]
    }

    const resultadoLista = lista2.map(item => ({
        status: lista1.includes(item),
        text: item
    }))

    return resultadoLista
}

// Extrair a avaliação do IMDb dos ratings
function getImdbRating(ratings) {
    if (!ratings || ratings === 'N/A') {
        return null
    }
    const imdbRating = ratings.find(rating => rating.Source === 'Internet Movie Database')
    return imdbRating ? imdbRating.Value : null
}

async function compararFilmes() {
    let titulo1 = await APIIMDB.descMovie('Iron Man 2')
    let titulo2 = await APIIMDB.descMovie('Iron Man')

    const resultadoComparacao = ComparacaoDeFilme(titulo1, titulo2)
    return resultadoComparacao
}

async function compararFilmesCertos(FilmeMaquina, FilmeUsuario) {
    let titulo1 = FilmeMaquina
    let titulo2 = await APIIMDB.descMovie(FilmeUsuario)

    const resultadoComparacao = ComparacaoDeFilme(titulo1, titulo2)
    return resultadoComparacao
}

// Executando a função de comparação
async function executarComparacao() {
    let resultado = await compararFilmes()
    console.log(resultado)
}

executarComparacao()


function passaParaFront(objeto){
    let obj = objeto

    let title = document.querySelector('#title')
    Released.style.backgroundColor = corFundo(obj.title.status)
    let h2title = document.querySelector('.h2title')
    h2title.textContent = obj.title.text

    let Released = document.querySelector('#Released')
    Released.style.backgroundColor = corFundo(obj.released.status)
    let pReleased = document.querySelector('.pReleased')
    let spanReleased = document.querySelector('.spanReleased')
    pReleased.textContent = obj.released.text
    spanReleased.textContent = obj.released.symbol


    let Runtime = document.querySelector('#Runtime')
    Runtime.style.backgroundColor = corFundo(obj.runtime.status)
    let pRuntime = document.querySelector('.pRuntime')
    let spanRuntime = document.querySelector('.spanRuntime')
    pRuntime.textContent = obj.runtime.text
    spanRuntime.textContent = obj.runtime.symbol
    
    obj.director.forEach(function(item, indice){
        if(indice == 0){
            let Director = document.querySelector('#Director')
            Director.style.backgroundColor = corFundo(item.status)
            let pDirector = document.querySelector('.pDirector')
            pDirector.textContent = obj.director.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Director${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pDirector${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allDirector')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
    obj.writer.forEach(function(item, indice){
        if(indice == 0){
            let Writer = document.querySelector('#Writer')
            Writer.style.backgroundColor = corFundo(item.status)
            let pWriter = document.querySelector('.pWriter')
            pWriter.textContent = obj.writer.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Writer${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pWriter${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allWriter')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.actors.forEach(function(item, indice){
        if(indice == 0){
            let Actors = document.querySelector('#Actors')
            Actors.style.backgroundColor = corFundo(item.status)
            let pActors = document.querySelector('.pActors')
            pActors.textContent = obj.actors.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Actors${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pActors${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allActors')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.genre.forEach(function(item, indice){
        if(indice == 0){
            let Genre = document.querySelector('#Genre')
            Genre.style.backgroundColor = corFundo(item.status)
            let pGenre = document.querySelector('.pGenre')
            pGenre.textContent = obj.genre.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Genre${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pGenre${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allGenre')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.country.forEach(function(item, indice){
        if(indice == 0){
            let Country = document.querySelector('#Country')
            Country.style.backgroundColor = corFundo(item.status)
            let pCountry = document.querySelector('.pCountry')
            pCountry.textContent = obj.country.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Country${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pCountry${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allCountry')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
    
    let Ratings = document.querySelector('#Ratings')
    Ratings.style.backgroundColor = corFundo(obj.ratings.status)
    let pRatings = document.querySelector('.pRatings')
    let spanRatings = document.querySelector('.spanRatings')
    pRatings.textContent = obj.ratings.text
    spanRatings.textContent = obj.ratings.symbol
    
    let boxOffice = document.querySelector('#boxOffice')
    boxOffice.style.backgroundColor = corFundo(obj.boxOffice.status)
    let pBoxOffice = document.querySelector('.pBoxOffice')
    let spanBoxOffice = document.querySelector('.spanBoxOffice')
    pBoxOffice.textContent = obj.boxOffice.text
    spanBoxOffice.textContent = obj.boxOffice.symbol
    

    obj.production.forEach(function(item, indice){
        if(indice == 0){
            let Production = document.querySelector('#Production')
            Production.style.backgroundColor = corFundo(item.status)
            let pProduction = document.querySelector('.pProduction')
            pProduction.textContent = obj.production.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Production${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pProduction${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allProduction')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
}

function corFundo(valor){
    let resposta = "var(--color-padrao-sugestao)"
    if(valor){
        resposta = "var(--color-acerto-sugestao)"
    }else if(!valor){
        resposta = "var(--color-erro-sugestao)"
    }else if(valor === null){
        resposta
    }
    return resposta
}

ARQUVO funcoesComOfront:

let debounceTimer

document.querySelector('.escolha').addEventListener('input', function () {
    const query = this.value // Pega o valor digitado no input
    const suggestionsBox = document.getElementById('suggestionsBox')

    // Limpa o temporizador anterior
    clearTimeout(debounceTimer)

    // Define um novo temporizador para aguardar 1 segundo após a última tecla
    debounceTimer = setTimeout(async () => {
        // Só faz a requisição se o valor tiver pelo menos 3 letras
        if (query.length >= 3) {
            const apiKey = '8f23043c'
            const url = `https://www.omdbapi.com/?s=${encodeURIComponent(query)}&type=movie&apikey=${apiKey}`

            try {
                const response = await fetch(url)
                const data = await response.json()

                // Limpa as sugestões anteriores
                suggestionsBox.textContent = ''

                if (data.Response === "True") {
                    // Loop pelos resultados e adiciona cada um nas sugestões
                    data.Search.forEach(result => {
                        const suggestionItem = document.createElement('div')
                        suggestionItem.textContent = result.Title

                        const releaseDateSpan = document.createElement('span')
                        releaseDateSpan.classList.add('release-date')
                        releaseDateSpan.textContent = ` (Lançamento: ${result.Year})` // Exibe o ano de lançamento
                        suggestionItem.appendChild(releaseDateSpan)

                        // Adiciona o item à lista de sugestões
                        suggestionsBox.appendChild(suggestionItem)

                        // Evento para preencher o campo com o nome selecionado
                        suggestionItem.addEventListener('click', () => {
                            document.getElementById('searchInput').value = result.Title
                            suggestionsBox.textContent = '' // Limpa as sugestões
                        })
                    })
                } else {
                    suggestionsBox.textContent = 'Nenhum resultado encontrado'
                }
            } catch (error) {
                console.error('Erro na requisição:', error)
            }
        } else {
            // Limpa as sugestões se o input for menor que 3 caracteres
            suggestionsBox.innerHTML = ''
        }
    }, 500) // 1 segundo de debounce
})

document.addEventListener('click', function (event) {
    const suggestionsBox = document.getElementById('suggestionsBox')
    const searchInput = document.getElementById('searchInput')

    // Verifica se o clique foi fora da caixa de sugestões e do campo de busca
    if (!suggestionsBox.contains(event.target) && event.target !== searchInput) {
        suggestionsBox.textContent = ''// Limpa as sugestões
    }
})

var aviso = document.querySelector('.aviso')
var sobre = document.querySelector('.sobre')
sobre.addEventListener('click', function() {

    if(aviso.style.display == 'flex'){
        aviso.style.display = 'none'
    }else{
        aviso.style.display = 'flex'
    }
 

})


AGORA O CODIGO QUE ESTá DANDO ERRO:

HTML:

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Qual é o filme?</title>
</head>
<body>
    <header>
        <h1>What is the movie?</h1>
        <div class="search-container">
            <input type="text" class="escolha" placeholder="Digite o nome de um filme ou série..." autocomplete="off">
            <div class="suggestions" id="suggestionsBox"></div>
        </div>
        <button class="sobre">Sobre</button>
    </header>
    <main>
        <div class="corpo">
            
            <div class="pricipal">
                <div id="title">
                    <h2 class="h2title">Movie you chose</h2>
                    <div class="atributos">
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Released</h3>
                            <div class="atributo" id="Released">
                                <p class="pReleased"></p>
                                <span class="spanReleased"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Runtime</h3>
                            <div class="atributo" id="Runtime">
                                <p class="pRuntime"></p>
                                <span class="spanRuntime"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Director</h3>
                            <div class="allDirector">
                                <div class="atributo" id="Director">
                                    <p class="pDirector"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Writer</h3>
                            <div class="allWriter">
                                <div class="atributo" id="Writer">
                                    <p class="pWriter"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Actors</h3>
                            <div class="allActors">
                                <div class="atributo" id="Actors">
                                    <p class="pActors"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Genre</h3>
                            <div class="allGenre">
                                <div class="atributo" id="Genre">
                                    <p class="pGenre"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Country</h3>
                            <div class="allCountry">
                                <div class="atributo" id="Country">
                                    <p class="pCountry"></p>
                                </div>
                            </div>
                            
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Ratings</h3>
                            <div class="atributo" id="Ratings">
                                <p class="pRatings"></p>
                                <span class="spanRatings"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">BoxOffice</h3>
                            <div class="atributo" id="BoxOffice">
                                <p class="pBoxOffice"></p>
                                <span class="spanBoxOffice"></span>
                            </div>
                        </div>
                        <div class="caixaAtributos">
                            <h3 class="tituloAtributos">Production</h3>
                            <div>
                                <div class="atributo" id="Production">
                                    <p class="pProduction"></p>
                                </div>
                            </div>
                            
                        </div>

                    </div>
                </div>
            </div>
            <div class="area">
                <span>O nome do filme precisa ser em inglês</span>
                <span>Os unícos filmes que o jogo funciona são do site IMDB</span>
                <button class="play">Play</button>
                <button>To give up</button>
                <div class="tip">
                    <button>Tip</button>
                    <img src="" alt="">                
                </div>
                <div>
                    <h3>Description of the machine film:</h3>
                    <span></span>
                </div>

            </div>

            <div class="linha"></div>
        </div>        
    </main>
    <footer>
        <span>Mohammad | 2024</span>
    </footer>
    <div class="aviso">
        <h3>How to play?</h3>
        <p>It's a project that started with advanced topics, the idea of ​​the game is that the machine will choose a film and you have to guess.</p>
        <p>Each attribute here will show what you got wrong, if the attribute turned green it means you got it right, if it turned red you got it wrong and in these cases if it's something like a number it will indicate if you got more or less wrong, and if it turned gray It's because one of the values ​​doesn't exist on the IMDb website</p>
    </div>
    <script src="./script/funcoesComOfront.js"></script>
</body>
</html>


JS:

ARQUIVO funcoes:


// const { title, year, released, runtime, director, writer, actors, genre, country, ratings, plot, boxOffice, production, poster } = descMovie;

const APIIMDB = require('./funcoesParaAPI')


function ComparacaoDeFilme(objeto1, objeto2) {
    let obj1 = objeto1
    let obj2 = objeto2
    const resultado = {}

    // Comparação dos campos especificados
    resultado.title = obj1.title && obj2.title
        ? { status: (obj1.title === obj2.title), text: obj2.title }
        : { status: null, text: 'Um ou ambos os títulos estão vazios' }

    resultado.released = compararNumerosOuDatas(obj1.released, obj2.released, 'released')
    resultado.runtime = compararNumerosOuDatas(obj1.runtime, obj2.runtime, 'runtime')

    resultado.director = compararListasParaObjeto(obj1.director.split(', '), obj2.director.split(', '), 'director')
    resultado.writer = compararListasParaObjeto(obj1.writer.split(', '), obj2.writer.split(', '), 'writer')
    resultado.actors = compararListasParaObjeto(obj1.actors.split(', '), obj2.actors.split(', '), 'actors')
    resultado.genre = compararListasParaObjeto(obj1.genre.split(', '), obj2.genre.split(', '), 'genre')
    resultado.country = compararListasParaObjeto(obj1.country.split(', '), obj2.country.split(', '), 'country')

    // Comparação de ratings (somente do IMDb)
    const imdbRating1 = getImdbRating(obj1.ratings)
    const imdbRating2 = getImdbRating(obj2.ratings)
    resultado.ratings = compararNumerosOuDatas(imdbRating1, imdbRating2, 'ratings')

    // Comparação de boxOffice
    resultado.boxOffice = compararNumerosOuDatas(obj1.boxOffice, obj2.boxOffice, 'boxOffice')

    // Comparação de production
    resultado.production = compararListasParaObjeto(obj1.production.split(', '), obj2.production.split(', '), 'production')

    return resultado
}
function compararNumerosOuDatas(valor1, valor2, Campo) {
    let val1 = valor1
    let val2 = valor2
    let nomeCampo = Campo
    if (!val1 || val1 === 'N/A') val1 = null
    if (!val2 || val2 === 'N/A') val2 = null

    if (!val1 && !val2) {
        return { status: null, text: `Os dois campos de ${nomeCampo} estão vazios`, symbol: '---' }
    }
    if (!val1) {
        return { status: null, text: `O ${nomeCampo} do primeiro objeto está vazio`, symbol: '---' }
    }
    if (!val2) {
        return { status: null, text: `O ${nomeCampo} do segundo objeto está vazio`, symbol: '---' }
    }
    if (val1 === val2) {
        return { status: true, text: val2, symbol: '=' }
    } else {
        return { status: false, text: val2, symbol: val1 > val2 ? '<' : '>' }
    }
}

function compararListasParaObjeto(lista1, lista2, nomeCampo) {
    if ((!lista1 || lista1.includes('N/A')) && (!lista2 || lista2.includes('N/A'))) {
        return [{ status: null, text: `Os dois campos de ${nomeCampo} estão vazios` }]
    }
    if (!lista1 || lista1.includes('N/A')) {
        return [{ status: null, text: `O ${nomeCampo} do primeiro objeto está vazio` }]
    }
    if (!lista2 || lista2.includes('N/A')) {
        return [{ status: null, text: `O ${nomeCampo} do segundo objeto está vazio` }]
    }

    const resultadoLista = lista2.map(item => ({
        status: lista1.includes(item),
        text: item
    }))

    return resultadoLista
}

// Extrair a avaliação do IMDb dos ratings
function getImdbRating(ratings) {
    if (!ratings || ratings === 'N/A') {
        return null
    }
    const imdbRating = ratings.find(rating => rating.Source === 'Internet Movie Database')
    return imdbRating ? imdbRating.Value : null
}

async function compararFilmes() {
    let titulo1 = await APIIMDB.descMovie('Iron Man 2')
    let titulo2 = await APIIMDB.descMovie('Iron Man')

    const resultadoComparacao = ComparacaoDeFilme(titulo1, titulo2)
    return resultadoComparacao
}

async function compararFilmesCertos(FilmeMaquina, FilmeUsuario) {
    let titulo1 = FilmeMaquina
    let titulo2 = await APIIMDB.descMovie(FilmeUsuario)

    const resultadoComparacao = ComparacaoDeFilme(titulo1, titulo2)
    return resultadoComparacao
}

// Executando a função de comparação
async function executarComparacao() {
    let resultado = await compararFilmes()
    console.log(resultado)
}

executarComparacao()


function passaParaFront(objeto){
    let obj = objeto

    let title = document.querySelector('#title')
    Released.style.backgroundColor = corFundo(obj.title.status)
    let h2title = document.querySelector('.h2title')
    h2title.textContent = obj.title.text

    let Released = document.querySelector('#Released')
    Released.style.backgroundColor = corFundo(obj.released.status)
    let pReleased = document.querySelector('.pReleased')
    let spanReleased = document.querySelector('.spanReleased')
    pReleased.textContent = obj.released.text
    spanReleased.textContent = obj.released.symbol


    let Runtime = document.querySelector('#Runtime')
    Runtime.style.backgroundColor = corFundo(obj.runtime.status)
    let pRuntime = document.querySelector('.pRuntime')
    let spanRuntime = document.querySelector('.spanRuntime')
    pRuntime.textContent = obj.runtime.text
    spanRuntime.textContent = obj.runtime.symbol
    
    obj.director.forEach(function(item, indice){
        if(indice == 0){
            let Director = document.querySelector('#Director')
            Director.style.backgroundColor = corFundo(item.status)
            let pDirector = document.querySelector('.pDirector')
            pDirector.textContent = obj.director.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Director${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pDirector${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allDirector')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
    obj.writer.forEach(function(item, indice){
        if(indice == 0){
            let Writer = document.querySelector('#Writer')
            Writer.style.backgroundColor = corFundo(item.status)
            let pWriter = document.querySelector('.pWriter')
            pWriter.textContent = obj.writer.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Writer${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pWriter${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allWriter')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.actors.forEach(function(item, indice){
        if(indice == 0){
            let Actors = document.querySelector('#Actors')
            Actors.style.backgroundColor = corFundo(item.status)
            let pActors = document.querySelector('.pActors')
            pActors.textContent = obj.actors.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Actors${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pActors${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allActors')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.genre.forEach(function(item, indice){
        if(indice == 0){
            let Genre = document.querySelector('#Genre')
            Genre.style.backgroundColor = corFundo(item.status)
            let pGenre = document.querySelector('.pGenre')
            pGenre.textContent = obj.genre.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Genre${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pGenre${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allGenre')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
    })
    obj.country.forEach(function(item, indice){
        if(indice == 0){
            let Country = document.querySelector('#Country')
            Country.style.backgroundColor = corFundo(item.status)
            let pCountry = document.querySelector('.pCountry')
            pCountry.textContent = obj.country.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Country${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pCountry${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allCountry')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
    
    let Ratings = document.querySelector('#Ratings')
    Ratings.style.backgroundColor = corFundo(obj.ratings.status)
    let pRatings = document.querySelector('.pRatings')
    let spanRatings = document.querySelector('.spanRatings')
    pRatings.textContent = obj.ratings.text
    spanRatings.textContent = obj.ratings.symbol
    
    let boxOffice = document.querySelector('#boxOffice')
    boxOffice.style.backgroundColor = corFundo(obj.boxOffice.status)
    let pBoxOffice = document.querySelector('.pBoxOffice')
    let spanBoxOffice = document.querySelector('.spanBoxOffice')
    pBoxOffice.textContent = obj.boxOffice.text
    spanBoxOffice.textContent = obj.boxOffice.symbol
    

    obj.production.forEach(function(item, indice){
        if(indice == 0){
            let Production = document.querySelector('#Production')
            Production.style.backgroundColor = corFundo(item.status)
            let pProduction = document.querySelector('.pProduction')
            pProduction.textContent = obj.production.text
        }else{
            let div = document.createElement('div')

            div.classList.add('atributo')
            div.id = `Production${indice}`;

            let paragrafo = document.createElement('p')

            paragrafo.classList.add(`pProduction${indice}`)

            paragrafo.textContent = obj.director.text


            div.appendChild(paragrafo);

            let allDirector = document.querySelector('.allProduction')
            document.allDirector.appendChild(div);


            div.style.backgroundColor = corFundo(item.status)
        }
        
    })
}

function corFundo(valor){
    let resposta = "var(--color-padrao-sugestao)"
    if(valor){
        resposta = "var(--color-acerto-sugestao)"
    }else if(!valor){
        resposta = "var(--color-erro-sugestao)"
    }else if(valor === null){
        resposta
    }
    return resposta
}
module.exports = {
    passaParaFront,
    compararFilmes
}


ARQUIVO funcoesComOfront: 

const funcoes = require('./funcoes')
const APIIMDB = require('./funcoesParaAPI')
let debounceTimer

document.querySelector('.escolha').addEventListener('input', function () {
    const query = this.value // Pega o valor digitado no input
    const suggestionsBox = document.getElementById('suggestionsBox')

    // Limpa o temporizador anterior
    clearTimeout(debounceTimer)

    // Define um novo temporizador para aguardar 1 segundo após a última tecla
    debounceTimer = setTimeout(async () => {
        // Só faz a requisição se o valor tiver pelo menos 3 letras
        if (query.length >= 3) {
            const apiKey = '8f23043c'
            const url = `https://www.omdbapi.com/?s=${encodeURIComponent(query)}&type=movie&apikey=${apiKey}`

            try {
                const response = await fetch(url)
                const data = await response.json()

                // Limpa as sugestões anteriores
                suggestionsBox.textContent = ''

                if (data.Response === "True") {
                    // Loop pelos resultados e adiciona cada um nas sugestões
                    data.Search.forEach(result => {
                        const suggestionItem = document.createElement('div')
                        suggestionItem.textContent = result.Title

                        const releaseDateSpan = document.createElement('span')
                        releaseDateSpan.classList.add('release-date')
                        releaseDateSpan.textContent = ` (Lançamento: ${result.Year})` // Exibe o ano de lançamento
                        suggestionItem.appendChild(releaseDateSpan)

                        
                        suggestionsBox.appendChild(suggestionItem)

                        // Evento para preencher o campo com o nome selecionado
                        suggestionItem.addEventListener('click', () => {
                            document.getElementById('searchInput').value = result.Title
                            suggestionsBox.textContent = '' 
                        })
                    })
                } else {
                    suggestionsBox.textContent = 'Nenhum resultado encontrado'
                }
            } catch (error) {
                console.error('Erro na requisição:', error)
            }
        } else {
            // Limpa as sugestões se o input for menor que 3 caracteres
            suggestionsBox.textContent = ''
        }
    }, 500)
})

document.addEventListener('click', function (event) {
    const suggestionsBox = document.getElementById('suggestionsBox')
    const searchInput = document.getElementById('searchInput')

    // Verifica se o clique foi fora da caixa de sugestões e do campo de busca
    if (!suggestionsBox.contains(event.target) && event.target !== searchInput) {
        suggestionsBox.textContent = ''// Limpa as sugestões
    }
})

var aviso = document.querySelector('.aviso')
var sobre = document.querySelector('.sobre')
sobre.addEventListener('click', function() {

    if(aviso.style.display == 'flex'){
        aviso.style.display = 'none'
    }else{
        aviso.style.display = 'flex'
    }

})


var play = document.querySelector('.play')
var inputEscolha = document.querySelector('.escolha')

play.addEventListener('click', function() {
    inputEscolha.addEventListener('keydown', function(event) {
        
        if (event.key === 'Enter') {

            let valorEscolhido = inputEscolha.value
    
            console.log('Valor guardado: ', valorEscolhido)
            
            //limpar o campo de input após capturar o valor
            inputEscolha.value = ''
        }
    })
})
  
  */